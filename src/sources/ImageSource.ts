import {
    EventDispatcher,
    type Texture,
    UnsignedByteType,
    FloatType,
    type TextureDataType,
} from 'three';
import type Extent from '../core/geographic/Extent';

class ImageResult {
    id: string;
    texture: Texture;
    extent: Extent;
    min: number;
    max: number;
    /**
     * @param options options
     * @param options.id The unique identifier of this result.
     * @param options.texture The texture.
     * @param options.extent The extent.
     * @param options.min The minimum value of this image (if applicable).
     * @param options.max The maximum value of this image (if applicable).
     */
    constructor(options: {
        id: string;
        texture: Texture;
        extent: Extent;
        min?: number;
        max?: number;
    }) {
        this.id = options.id;
        this.texture = options.texture;
        this.extent = options.extent;
        this.min = options.min;
        this.max = options.max;
    }
}

export type CustomContainsFn = (extent: Extent) => boolean;

export interface GetImageOptions {
    extent: Extent;
    width: number;
    id: string;
    height: number;
    createReadableTextures: boolean;
    signal?: AbortSignal;
}

export interface ImageResponse {
    id: string;
    request: () =>Promise<ImageResult>;
}

export interface ImageSourceOptions {
    /**
     * Should images be flipped vertically during composition ?
     */
    flipY?: boolean;
    /**
     * The data type of images generated.
     * For regular color images, this should be `true`. For images with a high dynamic range,
     * or images that requires additional processing, this should be `false`.
     */
    is8bit?: boolean;
    /**
     * The custom function to test if a given extent is contained in this
     * source. Note: we assume this function accepts extents in this source's CRS.
     */
    containsFn?: CustomContainsFn;
}

export interface ImageSourceEvents {
    /**
     * Raised when the source's content has been updated.
     */
    'updated': {};
}

/**
 * Base class for all image sources. The `ImageSource` produces images to be consumed by clients,
 * such as map layers.
 */
abstract class ImageSource extends EventDispatcher<ImageSourceEvents> {
    readonly isImageSource: boolean = true;
    type: string;
    /**
     * Gets whether images generated from this source should be flipped vertically.
     */
    readonly flipY: boolean;
    /**
     * Gets the datatype of images generated by this source.
     */
    datatype: TextureDataType;
    version: number;
    readonly containsFn: CustomContainsFn;

    /**
     * @param options Options.
     */
    constructor(options: ImageSourceOptions = {}) {
        super();

        this.isImageSource = true;
        this.type = 'ImageSource';

        this.flipY = options.flipY ?? false;
        this.datatype = (options.is8bit ?? true) ? UnsignedByteType : FloatType;

        this.version = 0;

        this.containsFn = options.containsFn;
    }

    /**
     * Returns an adjusted extent, width and height so that request pixels are aligned with source
     * pixels, and requests do not oversample the source.
     *
     * @param requestExtent The request extent.
     * @param requestWidth The width, in pixels, of the request extent.
     * @param requestHeight The height, in pixels, of the request extent.
     * @param margin The margin, in pixels, around the initial extent.
     * @returns The adjusted parameters.
     */
    // eslint-disable-next-line class-methods-use-this
    adjustExtentAndPixelSize(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        requestExtent: Extent,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        requestWidth: number,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        requestHeight: number,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        margin = 0,
    ): { extent: Extent; width: number; height: number; } | null {
        // Default implementation.
        return null;
    }

    /**
     * Returns the CRS of this source.
     *
     * @returns The CRS.
     */
    abstract getCrs(): string;

    /**
     * Returns the extent of this source expressed in the CRS of the source.
     *
     * @returns The extent of the source.
     */
    abstract getExtent(): Extent;

    /**
     * Raises an event to reload the source.
     */
    update() {
        this.dispatchEvent({ type: 'updated' });
    }

    /**
     * Gets whether this source contains the specified extent. If a custom contains function
     * is provided, it will be used. Otherwise,
     * {@link intersects intersects()} is used.
     *
     * This method is mainly used to discard non-relevant requests (i.e don't process regions
     * that are not relevant to this source).
     *
     * @param extent The extent to test.
     */
    contains(extent: Extent) {
        const convertedExtent = extent.clone().as(this.getCrs());

        if (this.containsFn) {
            return this.containsFn(convertedExtent);
        }

        return this.intersects(convertedExtent);
    }

    /**
     * Test the intersection between the specified extent and this source's extent.
     * This method may be overriden to perform special logic.
     *
     * @param extent The extent to test.
     * @returns `true` if the extent and this source extent intersects, `false` otherwise.
     */
    intersects(extent: Extent): boolean {
        const thisExtent = this.getExtent();
        if (thisExtent) {
            return thisExtent.intersectsExtent(extent);
        }
        // We don't have an extent, so we default to true.
        return true;
    }

    /**
     * Initializes the source.
     *
     * @param options Options.
     * @param options.targetProjection The target projection. Only useful for sources
     * that are able to reproject their data on the fly (typically vector sources).
     * @returns A promise that resolves when the source is initialized.
     */
    // eslint-disable-next-line max-len
    // eslint-disable-next-line class-methods-use-this, no-unused-vars, @typescript-eslint/no-unused-vars
    initialize(options: { targetProjection: string; }): Promise<void> {
        return Promise.resolve();
    }

    // eslint-disable-next-line jsdoc/require-returns-check
    /**
     * Gets the images for the specified extent and pixel size.
     *
     * @param options The options.
     * @param options.extent The extent of the request area.
     * @param options.width The pixel width of the request area.
     * @param options.id The identifier of the node that emitted the request.
     * @param options.height The pixel height of the request area.
     * @param options.createReadableTextures If `true`, the generated textures must
     * be readable (i.e `DataTextures`).
     * @param options.signal The optional abort signal.
     * @returns An array containing the functions to generate the images asynchronously.
     */
    // eslint-disable-next-line class-methods-use-this, no-unused-vars
    abstract getImages(options: GetImageOptions): Array<ImageResponse>;

    /**
     * Disposes unmanaged resources of this source.
     */
    // eslint-disable-next-line class-methods-use-this
    dispose() {
        // Implement this in derived classes to cleanup unmanaged resources,
        // such as cached objects.
    }
}

export default ImageSource;

export { ImageResult };
