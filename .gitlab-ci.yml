# TODO find a way to use stages with 2 parallel pipelines
#
# rationale: I'd like to have a 3 stages pipelines: install, test and deploy, and execute it for
# each supported node version.
#
# I cannot really do that now because gitlab does not seem to support having 2 distinct pipelines.
# the only thing you can do is:
#
#          stage install               stage test              stage deploy
# *---- npm i with node 8----*----npm test with node 8----*---...
#  \___ npm i with node 10__/ \___npm test with node 10___/
#
# this is problematic because I really don't want the node_modules/ folder to be mixed between
# versions.
#
# Instead, we'd like to have:
#
# *---- npm i with node 8----*----npm test with node 8----*---...
# *---- npm i with node 10---*----npm test with node 10___*---...
#

stages:
    - audit
    - build
    - lint
    - test
    - publish

default:
    image: node:lts-alpine
    interruptible: true
    tags:
        - saas-linux-large-amd64

variables:
    version_stable_release: '/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/'
    version_pre_release: '/^v[0-9]+\.[0-9]+\.[0-9]+\-(alpha|beta|rc)\.[0-9]+$/'

# Run pipelines on MR, tags and push on 'main'
workflow:
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - node_modules/

## AUDIT STAGE

audit:
    stage: audit
    script:
        - npm audit --omit=dev
    allow_failure: true

## BUILD STAGE

build_lts:
    stage: build
    # Don't have to wait for audit to finish
    needs: []
    script:
        - npm i
        - npm run make-package
    artifacts:
        paths:
            - build
            - giro3d-*.tgz
        name: '$CI_COMMIT_REF_SLUG'

build_current:
    stage: build
    # Don't have to wait for audit to finish
    needs: []
    image: node:current-alpine
    script:
        - export NODE_OPTIONS=--openssl-legacy-provider
        - npm i
        - npm run make-package

build_site:
    stage: build
    needs:
        - build_lts
    script:
        - apk add --no-cache git
        - npm i
        - npm run build-site
        - mv build/site public
    artifacts:
        paths:
            - public

## LINT STAGE

check-commit-message:
    stage: lint
    # Don't have to wait for audit/build to finish
    needs: []
    script:
        - npm i
        - apk add --no-cache git
        - git fetch origin main
        - git remote set-head origin -a
        - npx commitlint -x @commitlint/config-conventional --from=origin/HEAD --to=${CI_COMMIT_SHA}

lint:
    stage: lint
    # Don't have to wait for audit/build to finish
    needs: []
    script:
        - npm i
        - npm run lint -- --max-warnings=0

## TEST STAGE

test_unit_lts:
    stage: test
    # Start as soon as build is done
    needs:
        - build_lts
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
    script:
        - npm i
        - npm run test-with-coverage
    artifacts:
        paths:
            - build

test_unit_current:
    stage: test
    # Start as soon as build is done
    needs:
        - build_current
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
    image: node:current-alpine
    script:
        - npm i
        - npm run test-with-coverage

## PUBLISH STAGE

publish_prerelease_package:
    stage: publish
    interruptible: false
    retry: 1
    script:
        - channel="$(echo "$CI_COMMIT_TAG" | sed -E 's/^v[0-9]+\.[0-9]+\.[0-9]+-([[:alnum:]]+)\.[0-9]+$/\1/')"
        - npm i
        - npm config set -- '//registry.npmjs.org/:_authToken' "${NPM_AUTH_TOKEN}"
        - npm run make-package
        - npm publish build/giro3d/ --access public --tag ${channel}
    rules:
        - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ $version_pre_release'

publish_package:
    stage: publish
    interruptible: false
    retry: 1
    script:
        - npm i
        - npm config set -- '//registry.npmjs.org/:_authToken' "${NPM_AUTH_TOKEN}"
        - npm run make-package
        - npm publish build/giro3d/ --access public
    rules:
        - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ $version_stable_release'

pages:
    stage: publish
    # Start only if publishing package worked
    needs:
        - publish_package
    script:
        - apk add --no-cache git
        - npm i
        - npm run build-site -- --build-latest
        - mv build/site public
    artifacts:
        paths:
            - public
    rules:
        # Only publish website on releases (and exclude pre-releases)
        - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ $version_stable_release'

publish_next_site:
    stage: publish
    script:
        - apk add --no-cache git
        - npm i
        - npm run build-site
        - ./tasks/publish-website.sh --push
    rules:
        # Publish next website commits on main
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish_latest_site:
    stage: publish
    # Start only if publishing package worked
    needs:
        - publish_package
    script:
        - apk add --no-cache git
        - npm i
        - npm run build-site -- --build-latest
        - ./tasks/publish-website.sh --push
    rules:
        # Publish latest website on stable releases
        - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ $version_stable_release'
